name: CI
on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main
      - 'release/**'

jobs:
  #
  # Project checks
  #
  project:
    name: Project Checks
    runs-on: ubuntu-22.04
    timeout-minutes: 5

    steps:
      #
      # Install Go
      #
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'

      - name: Set env
        shell: bash
        run: |
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      #
      # Checkout repos
      #
      - name: Checkout cgroups
        uses: actions/checkout@v3
        with:
          path: src/github.com/containerd/cgroups
          fetch-depth: 25

      - name: Checkout common project repo
        uses: actions/checkout@v3
        with:
          repository: containerd/project
          path: src/github.com/containerd/project

      #
      # Go get dependencies
      #
      - name: Install dependencies
        env:
          GO111MODULE: off
        run: |
          go get -u github.com/vbatts/git-validation
          go get -u github.com/kunalkushwaha/ltag

      #
      # DCO / File headers
      #
      - name: DCO
        env:
          GITHUB_COMMIT_URL: ${{ github.event.pull_request.commits_url }}
          DCO_VERBOSITY: "-q"
          DCO_RANGE: ""
        working-directory: src/github.com/containerd/cgroups
        run: |
          set -x
          if [ -z "${GITHUB_COMMIT_URL}" ]; then
          DCO_RANGE=$(jq -r '.after + "..HEAD"' ${GITHUB_EVENT_PATH})
          else
          DCO_RANGE=$(curl ${GITHUB_COMMIT_URL} | jq -r '.[0].parents[0].sha +".."+ .[-1].sha')
          fi
          ../project/script/validate/dco

      - name: Headers
        run: ../project/script/validate/fileheader ../project/
        working-directory: src/github.com/containerd/cgroups

  test:
    name: Test cgroups
    timeout-minutes: 15
    needs: [project]

    strategy:
      matrix:
        # Ubuntu-20.04 has cgroups v1 default; Ubuntu-22.04 has cgroups v2 default.
        os: [ubuntu-20.04, ubuntu-22.04]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'

      - name: Set env
        shell: bash
        run: |
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      - name: Checkout cgroups
        uses: actions/checkout@v3
        with:
          path: src/github.com/containerd/cgroups

      - name: Run cgroup tests
        run: |
          $(command -v go) test -exec sudo -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        working-directory: src/github.com/containerd/cgroups

      - name: Build cgctl
        run: make all
        working-directory: src/github.com/containerd/cgroups

  proto:
    name: Compare auto-generated Go files
    runs-on: ubuntu-22.04

    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'

      - name: Set env
        shell: bash
        run: |
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      - name: Checkout cgroups
        uses: actions/checkout@v3
        with:
          path: src/github.com/containerd/cgroups

      - name: Install protoc
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.5/protoc-21.5-linux-x86_64.zip
          # /usr/local is not writable from GitHub Actions' user
          sudo unzip protoc-21.5-linux-x86_64.zip -d /usr/local

      - name: Install proto-related tools for Go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
          go install github.com/containerd/protobuild@v0.3.0
          go install github.com/containerd/protobuild/cmd/go-fix-acronym@v0.3.0

      - name: Compare auto-generated Go files
        run: |
          make proto
          git diff --exit-code
        working-directory: src/github.com/containerd/cgroups
